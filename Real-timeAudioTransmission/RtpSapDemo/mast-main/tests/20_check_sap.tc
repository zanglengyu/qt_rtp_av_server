
#include "mast.h"
#include "hext.h"
#include "mast-assert.h"

#include <arpa/inet.h>

#suite SAP

uint8_t buffer[MAST_SAP_MAX_LEN];


#test test_mast_sap_parse
int len = hext_filename_to_buffer(FIXTURE_DIR "sap_minimal_valid.hext", buffer, sizeof(buffer));
mast_sap_t sap;
int result = mast_sap_parse(buffer, len, &sap);

ck_assert_int_eq(result, 0);
ck_assert_uint_eq(sap.message_type, MAST_SAP_MESSAGE_ANNOUNCE);
ck_assert_uint_eq(sap.message_id_hash, 0xc6d3);
ck_assert_str_eq(sap.sdp, "v=0\r\n");


#test test_mast_sap_parse_no_mime
int len = hext_filename_to_buffer(FIXTURE_DIR "sap_minimal_no_mime.hext", buffer, sizeof(buffer));
mast_sap_t sap;
int result = mast_sap_parse(buffer, len, &sap);

ck_assert_int_eq(result, 0);
ck_assert_uint_eq(sap.message_type, MAST_SAP_MESSAGE_ANNOUNCE);
ck_assert_uint_eq(sap.message_id_hash, 0x4f50);
ck_assert_str_eq(sap.message_source, "192.168.10.10");
ck_assert_str_eq(sap.sdp, "v=0\r\n");


#test test_mast_sap_ipv6_origin
int len = hext_filename_to_buffer(FIXTURE_DIR "sap_minimal_ipv6_origin.hext", buffer, sizeof(buffer));
mast_sap_t sap;
int result = mast_sap_parse(buffer, len, &sap);
ck_assert_int_eq(result, 0);
ck_assert_uint_eq(sap.message_type, MAST_SAP_MESSAGE_ANNOUNCE);
ck_assert_uint_eq(sap.message_id_hash, 0xc6d3);
ck_assert_str_eq(sap.message_source, "2001:db8:85a3::8a2e:370:7334");
ck_assert_str_eq(sap.sdp, "v=0\r\n");


#test test_mast_sap_parse_unknown_mime
int len = hext_filename_to_buffer(FIXTURE_DIR "sap_minimal_unknown_mime.hext", buffer, sizeof(buffer));
mast_sap_t sap;
int result = mast_sap_parse(buffer, len, &sap);
ck_assert_int_eq(result, 1);


#test test_mast_sap_parse_too_short
int len = hext_filename_to_buffer(FIXTURE_DIR "sap_too_short.hext", buffer, sizeof(buffer));
mast_sap_t sap;
int result = mast_sap_parse(buffer, len, &sap);
ck_assert_int_eq(result, 1);


#test test_mast_sap_wrong_version
int len = hext_filename_to_buffer(FIXTURE_DIR "sap_wrong_version.hext", buffer, sizeof(buffer));
mast_sap_t sap;
int result = mast_sap_parse(buffer, len, &sap);
ck_assert_int_eq(result, 1);


#test test_mast_sap_encrypted
int len = hext_filename_to_buffer(FIXTURE_DIR "sap_minimal_encrypted.hext", buffer, sizeof(buffer));
mast_sap_t sap;
int result = mast_sap_parse(buffer, len, &sap);
ck_assert_int_eq(result, 1);


#test test_mast_sap_compressed
verbose = 1;
int len = hext_filename_to_buffer(FIXTURE_DIR "sap_minimal_compressed.hext", buffer, sizeof(buffer));
mast_sap_t sap;
int result = mast_sap_parse(buffer, len, &sap);
ck_assert_int_eq(result, 1);



#test test_mast_sap_generate
mast_socket_t sock;
const char* sdp = "v=0\r\n";
uint8_t result[MAST_SAP_MAX_LEN];
int result_len, expect_len;

expect_len = hext_filename_to_buffer(FIXTURE_DIR "sap_minimal_valid.hext", buffer, sizeof(buffer));
memset(&sock, 0, sizeof(sock));
sock.src_addr.ss_family = AF_INET;
inet_pton(AF_INET, "192.168.10.10", &((struct sockaddr_in*)&sock.src_addr)->sin_addr);

result_len = mast_sap_generate(&sock, sdp, MAST_SAP_MESSAGE_ANNOUNCE, result, sizeof(result));
ck_assert_int_eq(result_len, expect_len);
ck_assert_mem_eq(result, buffer, expect_len);


#test test_mast_sap_generate_ipv6
mast_socket_t sock;
const char* sdp = "v=0\r\n";
uint8_t result[MAST_SAP_MAX_LEN];
int result_len, expect_len;

expect_len = hext_filename_to_buffer(FIXTURE_DIR "sap_minimal_ipv6_origin.hext", buffer, sizeof(buffer));
memset(&sock, 0, sizeof(sock));
sock.src_addr.ss_family = AF_INET6;
inet_pton(AF_INET6, "2001:db8:85a3::8a2e:370:7334", &((struct sockaddr_in6*)&sock.src_addr)->sin6_addr);

result_len = mast_sap_generate(&sock, sdp, MAST_SAP_MESSAGE_ANNOUNCE, result, sizeof(result));
ck_assert_int_eq(result_len, expect_len);
ck_assert_mem_eq(result, buffer, expect_len);


#test test_mast_sap_generate_buffer_too_small
const char* sdp = "v=0\r\n";
uint8_t buffer[MAST_SAP_MAX_LEN];
int result;

result = mast_sap_generate(NULL, sdp, MAST_SAP_MESSAGE_ANNOUNCE, buffer, 10);
ck_assert_int_eq(result, -1);


