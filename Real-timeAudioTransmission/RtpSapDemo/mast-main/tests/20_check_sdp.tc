
#include "mast.h"
#include "hext.h"
#include "mast-assert.h"

#suite SDP

#test test_mast_sdp_parse_string_just_v
mast_sdp_t sdp;
int result;

result = mast_sdp_parse_string("v=0\n", &sdp);
ck_assert_uint_eq(result, -1);
ck_assert_str_eq(sdp.address, "");
ck_assert_str_eq(sdp.port, "");
ck_assert_str_eq(sdp.session_id, "");
ck_assert_str_eq(sdp.session_origin, "");
ck_assert_str_eq(sdp.session_name, "");
ck_assert_str_eq(sdp.information, "");
ck_assert_int_eq(sdp.payload_type, 0);
ck_assert_int_eq(sdp.encoding, -1);
ck_assert_int_eq(sdp.sample_size, 0);
ck_assert_int_eq(sdp.sample_rate, 0);
ck_assert_int_eq(sdp.channel_count, 0);
mast_assert_float_eq_3dp(sdp.packet_duration, 0.0f);
ck_assert_str_eq(sdp.ptp_gmid, "");
ck_assert_int_eq(sdp.clock_offset, 0);


#test test_mast_sdp_parse_file_lf
mast_sdp_t sdp;
int result;

result = mast_sdp_parse_file(FIXTURE_DIR "aes67-multicast-example.sdp", &sdp);
ck_assert_uint_eq(result, 0);
ck_assert_str_eq(sdp.address, "239.0.0.1");
ck_assert_str_eq(sdp.port, "5004");
ck_assert_str_eq(sdp.session_id, "1311738121");
ck_assert_str_eq(sdp.session_origin, "192.168.1.1");
ck_assert_str_eq(sdp.session_name, "Stage left I/O");
ck_assert_str_eq(sdp.information, "Channels 1-8");
ck_assert_int_eq(sdp.payload_type, 96);
ck_assert_int_eq(sdp.encoding, MAST_ENCODING_L24);
ck_assert_int_eq(sdp.sample_size, 24);
ck_assert_int_eq(sdp.sample_rate, 48000);
ck_assert_int_eq(sdp.channel_count, 8);
mast_assert_float_eq_3dp(sdp.packet_duration, 1.0f);
ck_assert_str_eq(sdp.ptp_gmid, "39-A7-94-FF-FE-07-CB-D0");
ck_assert_int_eq(sdp.clock_offset, 963214424);


#test test_mast_sdp_parse_file_crlf
mast_sdp_t sdp;
int result;

result = mast_sdp_parse_file(FIXTURE_DIR "dante-aes67-1.sdp", &sdp);
ck_assert_uint_eq(result, 0);
ck_assert_str_eq(sdp.address, "239.65.125.63");
ck_assert_str_eq(sdp.port, "5004");
ck_assert_str_eq(sdp.session_id, "1423986");
ck_assert_str_eq(sdp.session_origin, "169.254.98.63");
ck_assert_str_eq(sdp.session_name, "AOIP44-serial-1614 : 2");
ck_assert_str_eq(sdp.information, "2 channels: TxChan 0, TxChan 1");
ck_assert_int_eq(sdp.payload_type, 97);
ck_assert_int_eq(sdp.encoding, MAST_ENCODING_L24);
ck_assert_int_eq(sdp.sample_size, 24);
ck_assert_int_eq(sdp.sample_rate, 48000);
ck_assert_int_eq(sdp.channel_count, 2);
mast_assert_float_eq_3dp(sdp.packet_duration, 1.0f);
ck_assert_str_eq(sdp.ptp_gmid, "00-00-00-FF-FE-00-00-00");
ck_assert_int_eq(sdp.clock_offset, 3560866135);


#test test_mast_sdp_parse_file_doesnt_exist
mast_sdp_t sdp;
int result;

result = mast_sdp_parse_file(FIXTURE_DIR "doesnt_exist.sdp", &sdp);
ck_assert_uint_eq(result, -1);



#test test_sdp_xnode
mast_sdp_t sdp;
int result;

result = mast_sdp_parse_file(FIXTURE_DIR "xnode-l24-48000-2.sdp", &sdp);
ck_assert_uint_eq(result, 0);
ck_assert_str_eq(sdp.address, "239.192.10.5");
ck_assert_str_eq(sdp.port, "5004");
ck_assert_str_eq(sdp.session_id, "1");
ck_assert_str_eq(sdp.session_origin, "10.10.10.5");
ck_assert_str_eq(sdp.session_name, "Channel 501");
ck_assert_str_eq(sdp.information, "");
ck_assert_int_eq(sdp.payload_type, 96);
ck_assert_int_eq(sdp.encoding, MAST_ENCODING_L24);
ck_assert_int_eq(sdp.sample_size, 24);
ck_assert_int_eq(sdp.sample_rate, 48000);
ck_assert_int_eq(sdp.channel_count, 2);
mast_assert_float_eq_3dp(sdp.packet_duration, 0.0f);
ck_assert_str_eq(sdp.ptp_gmid, "54-58-10-FF-FE-62-13-45");
ck_assert_int_eq(sdp.clock_offset, 0);


#test test_sdp_parse_livewire_stl
mast_sdp_t sdp;
int result;

// Example found on Twitter: https://twitter.com/verySetya/status/1079900945725644800
result = mast_sdp_parse_file(FIXTURE_DIR "livewire-stl.sdp", &sdp);
ck_assert_uint_eq(result, 0);
ck_assert_str_eq(sdp.address, "239.192.0.123");
ck_assert_str_eq(sdp.port, "5004");
ck_assert_str_eq(sdp.session_id, "3");
ck_assert_str_eq(sdp.session_origin, "192.168.1.8");
ck_assert_str_eq(sdp.session_name, "PlayerMain @ PLAYER");
ck_assert_str_eq(sdp.information, "STL Main Output");
ck_assert_int_eq(sdp.payload_type, 96);
ck_assert_int_eq(sdp.encoding, MAST_ENCODING_L24);
ck_assert_int_eq(sdp.sample_size, 24);
ck_assert_int_eq(sdp.sample_rate, 48000);
ck_assert_int_eq(sdp.channel_count, 2);
mast_assert_float_eq_3dp(sdp.packet_duration, 5.442f);
ck_assert_str_eq(sdp.ptp_gmid, "");
ck_assert_int_eq(sdp.clock_offset, 0);


#test test_sdp_parse_ntp_clock
mast_sdp_t sdp;
int result;

result = mast_sdp_parse_file(FIXTURE_DIR "rfc7273-example-4.8.1.sdp", &sdp);
ck_assert_uint_eq(result, 0);
ck_assert_str_eq(sdp.address, "233.252.0.1");
ck_assert_str_eq(sdp.port, "49170");
ck_assert_str_eq(sdp.session_id, "2890844526");
ck_assert_str_eq(sdp.session_origin, "192.0.2.1");
ck_assert_str_eq(sdp.session_name, "SDP Seminar");
ck_assert_str_eq(sdp.information, "A Seminar on the session description protocol");
ck_assert_int_eq(sdp.payload_type, 10);
ck_assert_int_eq(sdp.encoding, MAST_ENCODING_L16);
ck_assert_int_eq(sdp.sample_size, 16);
ck_assert_int_eq(sdp.sample_rate, 44100);
ck_assert_int_eq(sdp.channel_count, 2);
mast_assert_float_eq_3dp(sdp.packet_duration, 0.0f);
ck_assert_str_eq(sdp.ptp_gmid, "");
ck_assert_int_eq(sdp.clock_offset, 0);


#test test_defaults
mast_sdp_t sdp;
mast_sdp_set_defaults(&sdp);
ck_assert(sdp.address[0] == '\0');
ck_assert_str_eq(sdp.port, "5004");
ck_assert_int_eq(sdp.payload_type, -1);
ck_assert_int_eq(sdp.encoding, MAST_ENCODING_L24);
ck_assert_int_eq(sdp.sample_size, 24);
ck_assert_int_eq(sdp.sample_rate, 48000);
ck_assert_int_eq(sdp.channel_count, 2);
mast_assert_float_eq_3dp(sdp.packet_duration, 0.0f);
ck_assert_str_eq(sdp.ptp_gmid, "");
ck_assert_int_eq(sdp.clock_offset, 0);

#test test_is_valid
mast_sdp_t sdp;
mast_sdp_set_defaults(&sdp);
mast_sdp_set_address(&sdp, "239.65.125.63");
ck_assert(mast_sdp_is_valid(&sdp) == TRUE);

#test test_is_valid_no_address
mast_sdp_t sdp;
mast_sdp_set_defaults(&sdp);
ck_assert(mast_sdp_is_valid(&sdp) == FALSE);

#test test_is_valid_no_encoding
mast_sdp_t sdp;
mast_sdp_set_defaults(&sdp);
mast_sdp_set_address(&sdp, "239.65.125.63");
mast_sdp_set_encoding(&sdp, -1);
ck_assert(mast_sdp_is_valid(&sdp) == FALSE);


#test test_set_address
mast_sdp_t sdp;
mast_sdp_set_defaults(&sdp);
mast_sdp_set_address(&sdp, "127.0.0.1");
ck_assert_str_eq(sdp.address, "127.0.0.1");
mast_sdp_set_address(&sdp, NULL);
ck_assert(sdp.address[0] == '\0');

#test test_set_port
mast_sdp_t sdp;
mast_sdp_set_defaults(&sdp);
mast_sdp_set_port(&sdp, "5004");
ck_assert_str_eq(sdp.port, "5004");
mast_sdp_set_port(&sdp, NULL);
ck_assert(sdp.port[0] == '\0');


#test test_set_encoding_l24
mast_sdp_t sdp;
mast_sdp_set_defaults(&sdp);
mast_sdp_set_encoding(&sdp, MAST_ENCODING_L24);
ck_assert_int_eq(sdp.encoding, MAST_ENCODING_L24);
ck_assert_int_eq(sdp.sample_size, 24);

#test test_set_encoding_l16
mast_sdp_t sdp;
mast_sdp_set_defaults(&sdp);
mast_sdp_set_encoding(&sdp, MAST_ENCODING_L16);
ck_assert_int_eq(sdp.encoding, MAST_ENCODING_L16);
ck_assert_int_eq(sdp.sample_size, 16);

#test test_set_encoding_pcma
mast_sdp_t sdp;
mast_sdp_set_defaults(&sdp);
mast_sdp_set_encoding(&sdp, MAST_ENCODING_PCMA);
ck_assert_int_eq(sdp.encoding, MAST_ENCODING_PCMA);
ck_assert_int_eq(sdp.sample_size, 16);

#test test_set_encoding_invalid
mast_sdp_t sdp;
mast_sdp_set_defaults(&sdp);
mast_sdp_set_encoding(&sdp, -1);
ck_assert_int_eq(sdp.encoding, -1);
ck_assert_int_eq(sdp.sample_size, 0);


#test test_set_encoding_name_l24
mast_sdp_t sdp;
mast_sdp_set_defaults(&sdp);
mast_sdp_set_encoding_name(&sdp, "L24");
ck_assert_int_eq(sdp.encoding, MAST_ENCODING_L24);
ck_assert_int_eq(sdp.sample_size, 24);

#test test_set_encoding_name_l16
mast_sdp_t sdp;
mast_sdp_set_defaults(&sdp);
mast_sdp_set_encoding_name(&sdp, "L16");
ck_assert_int_eq(sdp.encoding, MAST_ENCODING_L16);
ck_assert_int_eq(sdp.sample_size, 16);

#test test_set_encoding_name_pcma
mast_sdp_t sdp;
mast_sdp_set_defaults(&sdp);
mast_sdp_set_encoding_name(&sdp, "PCMA");
ck_assert_int_eq(sdp.encoding, MAST_ENCODING_PCMA);
ck_assert_int_eq(sdp.sample_size, 16);

#test test_set_encoding_name_invalid
mast_sdp_t sdp;
mast_sdp_set_defaults(&sdp);
mast_sdp_set_encoding_name(&sdp, "UNKNOWN");
ck_assert_int_eq(sdp.encoding, -1);
ck_assert_int_eq(sdp.sample_size, 0);
